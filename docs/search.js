window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "ano_dec", "modulename": "ano_dec", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec", "modulename": "ano_dec", "qualname": "Anodec", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.__init__", "modulename": "ano_dec", "qualname": "Anodec.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_info</span>,</span><span class=\"param\">\t<span class=\"n\">models_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;./models/anomalib/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">Draem</span><span class=\"p\">(</span>\n  <span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">):</span> <span class=\"n\">DraemModel</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"n\">reconstructive_subnetwork</span><span class=\"p\">):</span> <span class=\"n\">ReconstructiveSubNetwork</span><span class=\"p\">(</span>\n      <span class=\"p\">(</span><span class=\"n\">encoder</span><span class=\"p\">):</span> <span class=\"n\">EncoderReconstructive</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">block1</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">mp1</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">MaxPool2d</span><span class=\"p\">(</span><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ceil_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">block2</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">mp2</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">MaxPool2d</span><span class=\"p\">(</span><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ceil_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">block3</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">mp3</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">MaxPool2d</span><span class=\"p\">(</span><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ceil_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">block4</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">mp4</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">MaxPool2d</span><span class=\"p\">(</span><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ceil_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">block5</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"n\">decoder</span><span class=\"p\">):</span> <span class=\"n\">DecoderReconstructive</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">up1</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Upsample</span><span class=\"p\">(</span><span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;bilinear&#39;</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">db1</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">up2</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Upsample</span><span class=\"p\">(</span><span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;bilinear&#39;</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">db2</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">up3</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Upsample</span><span class=\"p\">(</span><span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;bilinear&#39;</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">db3</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">up4</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Upsample</span><span class=\"p\">(</span><span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;bilinear&#39;</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">db4</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">fin_out</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"n\">discriminative_subnetwork</span><span class=\"p\">):</span> <span class=\"n\">DiscriminativeSubNetwork</span><span class=\"p\">(</span>\n      <span class=\"p\">(</span><span class=\"n\">encoder_segment</span><span class=\"p\">):</span> <span class=\"n\">EncoderDiscriminative</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">block1</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">mp1</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">MaxPool2d</span><span class=\"p\">(</span><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ceil_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">block2</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">mp2</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">MaxPool2d</span><span class=\"p\">(</span><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ceil_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">block3</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">mp3</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">MaxPool2d</span><span class=\"p\">(</span><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ceil_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">block4</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">mp4</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">MaxPool2d</span><span class=\"p\">(</span><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ceil_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">block5</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">mp5</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">MaxPool2d</span><span class=\"p\">(</span><span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">dilation</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ceil_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">block6</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n      <span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"n\">decoder_segment</span><span class=\"p\">):</span> <span class=\"n\">DecoderDiscriminative</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">up_b</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Upsample</span><span class=\"p\">(</span><span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;bilinear&#39;</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">db_b</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">1024</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">up1</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Upsample</span><span class=\"p\">(</span><span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;bilinear&#39;</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">512</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">db1</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">768</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">up2</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Upsample</span><span class=\"p\">(</span><span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;bilinear&#39;</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">db2</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">384</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">up3</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Upsample</span><span class=\"p\">(</span><span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;bilinear&#39;</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">db3</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">192</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">up4</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Upsample</span><span class=\"p\">(</span><span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;bilinear&#39;</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">db4</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span> <span class=\"n\">BatchNorm2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span><span class=\"p\">,</span> <span class=\"n\">momentum</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">track_running_stats</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">):</span> <span class=\"n\">ReLU</span><span class=\"p\">(</span><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">fin_out</span><span class=\"p\">):</span> <span class=\"n\">Sequential</span><span class=\"p\">(</span>\n          <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">):</span> <span class=\"n\">Conv2d</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">kernel_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">stride</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">padding</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n        <span class=\"p\">)</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">loss</span><span class=\"p\">):</span> <span class=\"n\">DraemLoss</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"n\">l2_loss</span><span class=\"p\">):</span> <span class=\"n\">MSELoss</span><span class=\"p\">()</span>\n    <span class=\"p\">(</span><span class=\"n\">focal_loss</span><span class=\"p\">):</span> <span class=\"n\">FocalLoss</span><span class=\"p\">()</span>\n    <span class=\"p\">(</span><span class=\"n\">ssim_loss</span><span class=\"p\">):</span> <span class=\"n\">SSIMLoss</span><span class=\"p\">()</span>\n  <span class=\"p\">)</span>\n<span class=\"p\">)</span></span>)</span>"}, {"fullname": "ano_dec.Anodec.dataset", "modulename": "ano_dec", "qualname": "Anodec.dataset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.normal_data", "modulename": "ano_dec", "qualname": "Anodec.normal_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.abnormal_data", "modulename": "ano_dec", "qualname": "Anodec.abnormal_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.brains", "modulename": "ano_dec", "qualname": "Anodec.brains", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.dataset_name", "modulename": "ano_dec", "qualname": "Anodec.dataset_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.TASK", "modulename": "ano_dec", "qualname": "Anodec.TASK", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.IMAGE_SIZE", "modulename": "ano_dec", "qualname": "Anodec.IMAGE_SIZE", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.filepath_masks", "modulename": "ano_dec", "qualname": "Anodec.filepath_masks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.model", "modulename": "ano_dec", "qualname": "Anodec.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.model_key", "modulename": "ano_dec", "qualname": "Anodec.model_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.models_path", "modulename": "ano_dec", "qualname": "Anodec.models_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.inferencer", "modulename": "ano_dec", "qualname": "Anodec.inferencer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ano_dec.Anodec.create_datamodule", "modulename": "ano_dec", "qualname": "Anodec.create_datamodule", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ano_dec.Anodec.train_and_export_model", "modulename": "ano_dec", "qualname": "Anodec.train_and_export_model", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ano_dec.Anodec.run_inference", "modulename": "ano_dec", "qualname": "Anodec.run_inference", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ano_dec.Anodec.eval", "modulename": "ano_dec", "qualname": "Anodec.eval", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brain", "modulename": "brain", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "brain.Brain", "modulename": "brain", "qualname": "Brain", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "brain.Brain.__init__", "modulename": "brain", "qualname": "Brain.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">dataset_info</span>, </span><span class=\"param\"><span class=\"n\">embeddings_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;./datasets/embeddings/&#39;</span></span>)</span>"}, {"fullname": "brain.Brain.dataset", "modulename": "brain", "qualname": "Brain.dataset", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brain.Brain.brains", "modulename": "brain", "qualname": "Brain.brains", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brain.Brain.dataset_name", "modulename": "brain", "qualname": "Brain.dataset_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brain.Brain.seed", "modulename": "brain", "qualname": "Brain.seed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brain.Brain.embeddings_vis", "modulename": "brain", "qualname": "Brain.embeddings_vis", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brain.Brain.embeddings_models", "modulename": "brain", "qualname": "Brain.embeddings_models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brain.Brain.similarities", "modulename": "brain", "qualname": "Brain.similarities", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brain.Brain.embeddings_root", "modulename": "brain", "qualname": "Brain.embeddings_root", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brain.Brain.brain_taxonomy", "modulename": "brain", "qualname": "Brain.brain_taxonomy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "brain.Brain.compute_embeddings", "modulename": "brain", "qualname": "Brain.compute_embeddings", "kind": "function", "doc": "<p>Computes and stores embeddings for the given list of embedding model names. Uses V51 pre-defined dim. reduction methods.</p>\n\n<p>This method performs the following steps:</p>\n\n<ol>\n<li>Retrieves the list of pre-defined dimensionality reduction methods.</li>\n<li>Iterates over the provided embedding model names.</li>\n<li>Checks if each model is part of the V51 model zoo.</li>\n<li>Loads or computes embeddings for each model.</li>\n<li>Saves the computed embeddings to disk.</li>\n<li>Computes and stores visualizations for the embeddings using various dimensionality reduction methods.</li>\n</ol>\n\n<p>Parameters:\nembedding_model_names (list): A list of model names for which embeddings need to be computed.</p>\n\n<p>Raises:\nWarning: If a model is not part of the V51 model zoo or does not provide embeddings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">embedding_model_names</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brain.Brain.compute_similarity", "modulename": "brain", "qualname": "Brain.compute_similarity", "kind": "function", "doc": "<p>Computes the similarity of embeddings for the dataset.</p>\n\n<p>This method indexes the dataset by similarity and calculates the cosine\ndistance for the embeddings without dimensionality reduction. It iterates\nover the available embedding models and computes or loads the similarity\nresults for each model.</p>\n\n<p>The similarity results are stored in the <code>self.similarities</code> dictionary\nwith keys derived from the embedding model names.</p>\n\n<p>References:\n    - Voxel51 Brain Similarity Documentation:\n      <a href=\"https://docs.voxel51.com/user_guide/brain.html#similarity\">https://docs.voxel51.com/user_guide/brain.html#similarity</a></p>\n\n<p>Attributes:\n    self.embeddings_models (dict): A dictionary of embedding models.\n    self.brains (dict): A dictionary to store brain results.\n    self.similarities (dict): A dictionary to store similarity results.\n    self.dataset (Dataset): The dataset object to compute similarities on.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brain.Brain.compute_representativeness", "modulename": "brain", "qualname": "Brain.compute_representativeness", "kind": "function", "doc": "<p>Computes the representativeness of frames in the dataset using specified\nembedding models and methods.</p>\n\n<p>Args:\n    threshold (float, optional): The threshold value for selecting\n        representative frames. Defaults to 0.99.</p>\n\n<p>This method iterates over the embedding models and computes the\nrepresentativeness using different methods. The results are stored in\nthe dataset, and frames that meet the threshold criteria are updated\nwith a specific field and value from the brain taxonomy.</p>\n\n<p>The method uses the following representativeness computation methods:\n    - \"cluster-center\"\n    - \"cluster-center-downweight\"</p>\n\n<p>The computed representativeness is stored in the dataset under keys\ngenerated from the embedding model names and methods. If the key\nalready exists in the brains attribute, the existing similarities\nare loaded from the dataset.</p>\n\n<p>The method also updates the dataset samples that meet the threshold\ncriteria by setting a specific field to a value defined in the brain\ntaxonomy and saving the changes.</p>\n\n<p>References:\n    - <a href=\"https://docs.voxel51.com/brain.html#image-representativeness\">https://docs.voxel51.com/brain.html#image-representativeness</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.99</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brain.Brain.compute_unique_images_greedy", "modulename": "brain", "qualname": "Brain.compute_unique_images_greedy", "kind": "function", "doc": "<p>Computes a subset of unique images from the dataset using a greedy algorithm.</p>\n\n<p>This method identifies a subset of images whose embeddings are as far apart as possible,\nmaximizing the k=1 neighbor distance. The percentage of unique images to be found is\nspecified by the <code>perct_unique</code> parameter.</p>\n\n<p>Args:\n    perct_unique (float): The percentage of unique images to find in the dataset.\n              Default is 0.01 (1%).</p>\n\n<p>Notes:\n    - The method checks if any sample in the dataset already has the label indicating\n      uniqueness. If such samples exist, the method does nothing.\n    - If no such samples exist, the method iterates over the similarities and computes\n      unique images using the <code>find_unique</code> method of each similarity object.\n    - The unique images are then tagged with a specific field and value and saved back\n      to the dataset.</p>\n\n<p>References:\n    - Voxel51 Brain documentation: <a href=\"https://docs.voxel51.com/user_guide/brain.html#cifar-10-example\">https://docs.voxel51.com/user_guide/brain.html#cifar-10-example</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">perct_unique</span><span class=\"o\">=</span><span class=\"mf\">0.01</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brain.Brain.compute_unique_images_deterministic", "modulename": "brain", "qualname": "Brain.compute_unique_images_deterministic", "kind": "function", "doc": "<p>Computes a deterministic uniqueness score for each sample in the dataset\nand updates the dataset with the computed uniqueness values. Weighted k-neighbors distances for each sample.</p>\n\n<p>This method iterates over the embeddings models, computes the uniqueness\nscore for each embedding, and updates the dataset with the computed scores.\nSamples with uniqueness scores greater than or equal to the specified\nthreshold are marked with a specific field and value.</p>\n\n<p>Args:\n    threshold (float, optional): The threshold value for determining\n    unique samples. Samples with uniqueness scores greater than or\n    equal to this threshold will be marked. Default is 0.99.</p>\n\n<p>References:\n    - <a href=\"https://docs.voxel51.com/api/fiftyone.brain.html#fiftyone.brain.compute_uniqueness\">https://docs.voxel51.com/api/fiftyone.brain.html#fiftyone.brain.compute_uniqueness</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mf\">0.99</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brain.Brain.find_samples_by_text", "modulename": "brain", "qualname": "Brain.find_samples_by_text", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prompt</span>, </span><span class=\"param\"><span class=\"n\">model_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brain.Brain.compute_duplicate_images", "modulename": "brain", "qualname": "Brain.compute_duplicate_images", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fraction</span><span class=\"o\">=</span><span class=\"mf\">0.99</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "brain.Brain.compute_similar_images", "modulename": "brain", "qualname": "Brain.compute_similar_images", "kind": "function", "doc": "<p>Computes and assigns similar images based on a distance threshold and neighbour count.</p>\n\n<p>This method checks if samples have already assigned fields and if not, it finds unique views\nand assigns neighbours based on similarity. It iterates through the similarities and updates\nthe dataset with the computed values.</p>\n\n<p>Parameters:\ndist_threshold (float): The distance threshold to consider for similarity. Default is 0.03.\nneighbour_count (int): The number of neighbours to consider for each sample. Default is 3.</p>\n\n<p>Returns:\nNone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dist_threshold</span><span class=\"o\">=</span><span class=\"mf\">0.03</span>, </span><span class=\"param\"><span class=\"n\">neighbour_count</span><span class=\"o\">=</span><span class=\"mi\">3</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "config", "modulename": "config", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "config.SELECTED_WORKFLOW", "modulename": "config", "qualname": "SELECTED_WORKFLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;learn_normality&#x27;"}, {"fullname": "config.SELECTED_DATASET", "modulename": "config", "qualname": "SELECTED_DATASET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;mcity_fisheye_ano_ped&#x27;"}, {"fullname": "config.SELECTED_SPLITS", "modulename": "config", "qualname": "SELECTED_SPLITS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;train&#x27;, &#x27;val&#x27;]"}, {"fullname": "config.PERSISTENT", "modulename": "config", "qualname": "PERSISTENT", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "config.V51_EMBEDDING_MODELS", "modulename": "config", "qualname": "V51_EMBEDDING_MODELS", "kind": "variable", "doc": "<p></p>\n", "default_value": "(&#x27;clip-vit-base32-torch&#x27;, &#x27;open-clip-torch&#x27;, &#x27;dinov2-vitl14-torch&#x27;, &#x27;mobilenet-v2-imagenet-torch&#x27;, &#x27;resnet152-imagenet-torch&#x27;, &#x27;vgg19-imagenet-torch&#x27;, &#x27;classification-transformer-torch&#x27;, &#x27;detection-transformer-torch&#x27;, &#x27;zero-shot-detection-transformer-torch&#x27;, &#x27;zero-shot-classification-transformer-torch&#x27;)"}, {"fullname": "config.WORKFLOWS", "modulename": "config", "qualname": "WORKFLOWS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;brain_selection&#x27;: {}, &#x27;learn_normality&#x27;: {}}"}, {"fullname": "config.NUM_WORKERS", "modulename": "config", "qualname": "NUM_WORKERS", "kind": "variable", "doc": "<p></p>\n", "default_value": "32"}, {"fullname": "main", "modulename": "main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "main.panel_embeddings", "modulename": "main", "qualname": "panel_embeddings", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v51_brain</span>, </span><span class=\"param\"><span class=\"n\">color_field</span><span class=\"o\">=</span><span class=\"s1\">&#39;unique&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "main.main", "modulename": "main", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_loader", "modulename": "data_loader", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "data_loader.load_dataset_info", "modulename": "data_loader", "qualname": "load_dataset_info", "kind": "function", "doc": "<p>Load dataset information from a YAML configuration file.</p>\n\n<p>Args:\n    dataset_name (str): The name of the dataset to retrieve information for.\n    config_path (str, optional): The path to the YAML configuration file. Defaults to \"datasets/datasets.yaml\".</p>\n\n<p>Returns:\n    dict or None: A dictionary containing the dataset information if found, otherwise None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset_name</span>, </span><span class=\"param\"><span class=\"n\">config_path</span><span class=\"o\">=</span><span class=\"s1\">&#39;datasets/datasets.yaml&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_loader.load_mcity_fisheye_2000", "modulename": "data_loader", "qualname": "load_mcity_fisheye_2000", "kind": "function", "doc": "<p>Loads the Mcity Fisheye 2000 dataset based on the provided dataset information.</p>\n\n<p>Args:\n    dataset_info (dict): A dictionary containing the following keys:\n        - \"name\" (str): The name of the dataset.\n        - \"local_path\" (str): The local path to the dataset directory.\n        - \"v51_type\" (str): The type of the dataset, corresponding to a type in <code>fo.types</code>.\n        - \"v51_splits\" (list): A list of dataset splits to be loaded.</p>\n\n<p>Returns:\n    fo.Dataset: The loaded dataset object.</p>\n\n<p>Raises:\n    KeyError: If any of the required keys are missing in <code>dataset_info</code>.\n    AttributeError: If <code>v51_type</code> does not correspond to a valid type in <code>fo.types</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_loader.process_mcity_fisheye_2000_filename", "modulename": "data_loader", "qualname": "process_mcity_fisheye_2000_filename", "kind": "function", "doc": "<p>Processes a given filename to extract metadata including location, name, and timestamp.</p>\n\n<p>Args:\n    filename (str): The full path or name of the file to be processed.</p>\n\n<p>Returns:\n    dict: A dictionary containing the following keys:\n        - 'filename' (str): The base name of the file.\n        - 'location' (str or None): The location extracted from the filename, if available.\n        - 'name' (str or None): The cleaned name extracted from the filename.\n        - 'timestamp' (datetime or None): The timestamp extracted from the filename, if available.</p>\n\n<p>The function performs the following steps:\n    1. Extracts the base name of the file.\n    2. Searches for a known location within the filename.\n    3. Splits the filename into two parts based on the first occurrence of a 4-digit year.\n    4. Cleans up the first part to derive the name.\n    5. Extracts and parses the timestamp from the second part of the filename.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_loader.load_mars_multiagent", "modulename": "data_loader", "qualname": "load_mars_multiagent", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "data_loader.load_mars_multitraversal", "modulename": "data_loader", "qualname": "load_mars_multitraversal", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging", "modulename": "logging", "kind": "module", "doc": "<p>Logging package for Python. Based on PEP 282 and comments thereto in\ncomp.lang.python.</p>\n\n<p>Copyright (C) 2001-2022 Vinay Sajip. All Rights Reserved.</p>\n\n<p>To use, simply 'import logging' and log away!</p>\n"}, {"fullname": "logging.BASIC_FORMAT", "modulename": "logging", "qualname": "BASIC_FORMAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;%(levelname)s:%(name)s:%(message)s&#x27;"}, {"fullname": "logging.BufferingFormatter", "modulename": "logging", "qualname": "BufferingFormatter", "kind": "class", "doc": "<p>A formatter suitable for formatting a number of records.</p>\n"}, {"fullname": "logging.BufferingFormatter.__init__", "modulename": "logging", "qualname": "BufferingFormatter.__init__", "kind": "function", "doc": "<p>Optionally specify a formatter which will be used to format each\nindividual record.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">linefmt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "logging.BufferingFormatter.formatHeader", "modulename": "logging", "qualname": "BufferingFormatter.formatHeader", "kind": "function", "doc": "<p>Return the header string for the specified records.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">records</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.BufferingFormatter.formatFooter", "modulename": "logging", "qualname": "BufferingFormatter.formatFooter", "kind": "function", "doc": "<p>Return the footer string for the specified records.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">records</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.BufferingFormatter.format", "modulename": "logging", "qualname": "BufferingFormatter.format", "kind": "function", "doc": "<p>Format the specified records and return the result as a string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">records</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.CRITICAL", "modulename": "logging", "qualname": "CRITICAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "50"}, {"fullname": "logging.DEBUG", "modulename": "logging", "qualname": "DEBUG", "kind": "variable", "doc": "<p></p>\n", "default_value": "10"}, {"fullname": "logging.ERROR", "modulename": "logging", "qualname": "ERROR", "kind": "variable", "doc": "<p></p>\n", "default_value": "40"}, {"fullname": "logging.FATAL", "modulename": "logging", "qualname": "FATAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "50"}, {"fullname": "logging.FileHandler", "modulename": "logging", "qualname": "FileHandler", "kind": "class", "doc": "<p>A handler class which writes formatted logging records to disk files.</p>\n", "bases": "StreamHandler"}, {"fullname": "logging.FileHandler.__init__", "modulename": "logging", "qualname": "FileHandler.__init__", "kind": "function", "doc": "<p>Open the specified file and use it as the stream for logging.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;a&#39;</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">delay</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "logging.FileHandler.baseFilename", "modulename": "logging", "qualname": "FileHandler.baseFilename", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.FileHandler.mode", "modulename": "logging", "qualname": "FileHandler.mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.FileHandler.encoding", "modulename": "logging", "qualname": "FileHandler.encoding", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.FileHandler.errors", "modulename": "logging", "qualname": "FileHandler.errors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.FileHandler.delay", "modulename": "logging", "qualname": "FileHandler.delay", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.FileHandler.close", "modulename": "logging", "qualname": "FileHandler.close", "kind": "function", "doc": "<p>Closes the stream.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.FileHandler.emit", "modulename": "logging", "qualname": "FileHandler.emit", "kind": "function", "doc": "<p>Emit a record.</p>\n\n<p>If the stream was not opened because 'delay' was specified in the\nconstructor, open it before calling the superclass's emit.</p>\n\n<p>If stream is not open, current mode is 'w' and <code>_closed=True</code>, record\nwill not be emitted (see Issue #42378).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Filter", "modulename": "logging", "qualname": "Filter", "kind": "class", "doc": "<p>Filter instances are used to perform arbitrary filtering of LogRecords.</p>\n\n<p>Loggers and Handlers can optionally use Filter instances to filter\nrecords as desired. The base filter class only allows events which are\nbelow a certain point in the logger hierarchy. For example, a filter\ninitialized with \"A.B\" will allow events logged by loggers \"A.B\",\n\"A.B.C\", \"A.B.C.D\", \"A.B.D\" etc. but not \"A.BB\", \"B.A.B\" etc. If\ninitialized with the empty string, all events are passed.</p>\n"}, {"fullname": "logging.Filter.__init__", "modulename": "logging", "qualname": "Filter.__init__", "kind": "function", "doc": "<p>Initialize a filter.</p>\n\n<p>Initialize with the name of the logger which, together with its\nchildren, will have its events allowed through the filter. If no\nname is specified, allow every event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span>)</span>"}, {"fullname": "logging.Filter.name", "modulename": "logging", "qualname": "Filter.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Filter.nlen", "modulename": "logging", "qualname": "Filter.nlen", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Filter.filter", "modulename": "logging", "qualname": "Filter.filter", "kind": "function", "doc": "<p>Determine if the specified record is to be logged.</p>\n\n<p>Returns True if the record should be logged, or False otherwise.\nIf deemed appropriate, the record may be modified in-place.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Formatter", "modulename": "logging", "qualname": "Formatter", "kind": "class", "doc": "<p>Formatter instances are used to convert a LogRecord to text.</p>\n\n<p>Formatters need to know how a LogRecord is constructed. They are\nresponsible for converting a LogRecord to (usually) a string which can\nbe interpreted by either a human or an external system. The base Formatter\nallows a formatting string to be specified. If none is supplied, the\nstyle-dependent default value, \"%(message)s\", \"{message}\", or\n\"${message}\", is used.</p>\n\n<p>The Formatter can be initialized with a format string which makes use of\nknowledge of the LogRecord attributes - e.g. the default value mentioned\nabove makes use of the fact that the user's message and arguments are pre-\nformatted into a LogRecord's message attribute. Currently, the useful\nattributes in a LogRecord are described by:</p>\n\n<p>%(name)s            Name of the logger (logging channel)\n%(levelno)s         Numeric logging level for the message (DEBUG, INFO,\n                    WARNING, ERROR, CRITICAL)\n%(levelname)s       Text logging level for the message (\"DEBUG\", \"INFO\",\n                    \"WARNING\", \"ERROR\", \"CRITICAL\")\n%(pathname)s        Full pathname of the source file where the logging\n                    call was issued (if available)\n%(filename)s        Filename portion of pathname\n%(module)s          Module (name portion of filename)\n%(lineno)d          Source line number where the logging call was issued\n                    (if available)\n%(funcName)s        Function name\n%(created)f         Time when the LogRecord was created (time.time()\n                    return value)\n%(asctime)s         Textual time when the LogRecord was created\n%(msecs)d           Millisecond portion of the creation time\n%(relativeCreated)d Time in milliseconds when the LogRecord was created,\n                    relative to the time the logging module was loaded\n                    (typically at application startup time)\n%(thread)d          Thread ID (if available)\n%(threadName)s      Thread name (if available)\n%(taskName)s        Task name (if available)\n%(process)d         Process ID (if available)\n%(message)s         The result of record.getMessage(), computed just as\n                    the record is emitted</p>\n"}, {"fullname": "logging.Formatter.__init__", "modulename": "logging", "qualname": "Formatter.__init__", "kind": "function", "doc": "<p>Initialize the formatter with specified format strings.</p>\n\n<p>Initialize the formatter either with the specified format string, or a\ndefault as described above. Allow for specialized date formatting with\nthe optional datefmt argument. If datefmt is omitted, you get an\nISO8601-like (or RFC 3339-like) format.</p>\n\n<p>Use a style parameter of '%', '{' or '$' to specify that you want to\nuse one of %-formatting, <code>str.format()</code> (<code>{}</code>) formatting or\n<code>string.Template</code> formatting in your format string.</p>\n\n<p><em>Changed in version 3.2:</em>\nAdded the <code>style</code> parameter.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">datefmt</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">&#39;%&#39;</span>, </span><span class=\"param\"><span class=\"n\">validate</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">*</span>, </span><span class=\"param\"><span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "logging.Formatter.converter", "modulename": "logging", "qualname": "Formatter.converter", "kind": "function", "doc": "<p>localtime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,\n                          tm_sec,tm_wday,tm_yday,tm_isdst)</p>\n\n<p>Convert seconds since the Epoch to a time tuple expressing local time.\nWhen 'seconds' is not passed in, convert the current time instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Formatter.datefmt", "modulename": "logging", "qualname": "Formatter.datefmt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Formatter.default_time_format", "modulename": "logging", "qualname": "Formatter.default_time_format", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;%Y-%m-%d %H:%M:%S&#x27;"}, {"fullname": "logging.Formatter.default_msec_format", "modulename": "logging", "qualname": "Formatter.default_msec_format", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;%s,%03d&#x27;"}, {"fullname": "logging.Formatter.formatTime", "modulename": "logging", "qualname": "Formatter.formatTime", "kind": "function", "doc": "<p>Return the creation time of the specified LogRecord as formatted text.</p>\n\n<p>This method should be called from format() by a formatter which\nwants to make use of a formatted time. This method can be overridden\nin formatters to provide for any specific requirement, but the\nbasic behaviour is as follows: if datefmt (a string) is specified,\nit is used with time.strftime() to format the creation time of the\nrecord. Otherwise, an ISO8601-like (or RFC 3339-like) format is used.\nThe resulting string is returned. This function uses a user-configurable\nfunction to convert the creation time to a tuple. By default,\ntime.localtime() is used; to change this for a particular formatter\ninstance, set the 'converter' attribute to a function with the same\nsignature as time.localtime() or time.gmtime(). To change it for all\nformatters, for example if you want all logging times to be shown in GMT,\nset the 'converter' attribute in the Formatter class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span>, </span><span class=\"param\"><span class=\"n\">datefmt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Formatter.formatException", "modulename": "logging", "qualname": "Formatter.formatException", "kind": "function", "doc": "<p>Format and return the specified exception information as a string.</p>\n\n<p>This default implementation just uses\ntraceback.print_exception()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ei</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Formatter.usesTime", "modulename": "logging", "qualname": "Formatter.usesTime", "kind": "function", "doc": "<p>Check if the format uses the creation time of the record.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Formatter.formatMessage", "modulename": "logging", "qualname": "Formatter.formatMessage", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Formatter.formatStack", "modulename": "logging", "qualname": "Formatter.formatStack", "kind": "function", "doc": "<p>This method is provided as an extension point for specialized\nformatting of stack information.</p>\n\n<p>The input data is a string as returned from a call to\n<code>traceback.print_stack()</code>, but with the last trailing newline\nremoved.</p>\n\n<p>The base implementation just returns the value passed in.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stack_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Formatter.format", "modulename": "logging", "qualname": "Formatter.format", "kind": "function", "doc": "<p>Format the specified record as text.</p>\n\n<p>The record's attribute dictionary is used as the operand to a\nstring formatting operation which yields the returned string.\nBefore formatting the dictionary, a couple of preparatory steps\nare carried out. The message attribute of the record is computed\nusing LogRecord.getMessage(). If the formatting string uses the\ntime (as determined by a call to usesTime(), formatTime() is\ncalled to format the event time. If there is exception information,\nit is formatted using formatException() and appended to the message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler", "modulename": "logging", "qualname": "Handler", "kind": "class", "doc": "<p>Handler instances dispatch logging events to specific destinations.</p>\n\n<p>The base handler class. Acts as a placeholder which defines the Handler\ninterface. Handlers can optionally use Formatter instances to format\nrecords as desired. By default, no formatter is specified; in this case,\nthe 'raw' message as determined by record.message is logged.</p>\n", "bases": "Filterer"}, {"fullname": "logging.Handler.__init__", "modulename": "logging", "qualname": "Handler.__init__", "kind": "function", "doc": "<p>Initializes the instance - basically setting the formatter to None\nand the filter list to empty.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "logging.Handler.level", "modulename": "logging", "qualname": "Handler.level", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Handler.formatter", "modulename": "logging", "qualname": "Handler.formatter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Handler.get_name", "modulename": "logging", "qualname": "Handler.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.set_name", "modulename": "logging", "qualname": "Handler.set_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.name", "modulename": "logging", "qualname": "Handler.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Handler.createLock", "modulename": "logging", "qualname": "Handler.createLock", "kind": "function", "doc": "<p>Acquire a thread lock for serializing access to the underlying I/O.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.acquire", "modulename": "logging", "qualname": "Handler.acquire", "kind": "function", "doc": "<p>Acquire the I/O thread lock.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.release", "modulename": "logging", "qualname": "Handler.release", "kind": "function", "doc": "<p>Release the I/O thread lock.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.setLevel", "modulename": "logging", "qualname": "Handler.setLevel", "kind": "function", "doc": "<p>Set the logging level of this handler.  level must be an int or a str.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.format", "modulename": "logging", "qualname": "Handler.format", "kind": "function", "doc": "<p>Format the specified record.</p>\n\n<p>If a formatter is set, use it. Otherwise, use the default formatter\nfor the module.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.emit", "modulename": "logging", "qualname": "Handler.emit", "kind": "function", "doc": "<p>Do whatever it takes to actually log the specified logging record.</p>\n\n<p>This version is intended to be implemented by subclasses and so\nraises a NotImplementedError.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.handle", "modulename": "logging", "qualname": "Handler.handle", "kind": "function", "doc": "<p>Conditionally emit the specified logging record.</p>\n\n<p>Emission depends on filters which may have been added to the handler.\nWrap the actual emission of the record with acquisition/release of\nthe I/O thread lock.</p>\n\n<p>Returns an instance of the log record that was emitted\nif it passed all filters, otherwise a false value is returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.setFormatter", "modulename": "logging", "qualname": "Handler.setFormatter", "kind": "function", "doc": "<p>Set the formatter for this handler.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fmt</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.flush", "modulename": "logging", "qualname": "Handler.flush", "kind": "function", "doc": "<p>Ensure all logging output has been flushed.</p>\n\n<p>This version does nothing and is intended to be implemented by\nsubclasses.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.close", "modulename": "logging", "qualname": "Handler.close", "kind": "function", "doc": "<p>Tidy up any resources used by the handler.</p>\n\n<p>This version removes the handler from an internal map of handlers,\n_handlers, which is used for handler lookup by name. Subclasses\nshould ensure that this gets called from overridden close()\nmethods.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Handler.handleError", "modulename": "logging", "qualname": "Handler.handleError", "kind": "function", "doc": "<p>Handle errors which occur during an emit() call.</p>\n\n<p>This method should be called from handlers when an exception is\nencountered during an emit() call. If raiseExceptions is false,\nexceptions get silently ignored. This is what is mostly wanted\nfor a logging system - most users will not care about errors in\nthe logging system, they are more interested in application errors.\nYou could, however, replace this with a custom handler if you wish.\nThe record which was being processed is passed in to this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.INFO", "modulename": "logging", "qualname": "INFO", "kind": "variable", "doc": "<p></p>\n", "default_value": "20"}, {"fullname": "logging.LogRecord", "modulename": "logging", "qualname": "LogRecord", "kind": "class", "doc": "<p>A LogRecord instance represents an event being logged.</p>\n\n<p>LogRecord instances are created every time something is logged. They\ncontain all the information pertinent to the event being logged. The\nmain information passed in is in msg and args, which are combined\nusing str(msg) % args to create the message field of the record. The\nrecord also includes information such as when the record was created,\nthe source line where the logging call was made, and any exception\ninformation to be logged.</p>\n"}, {"fullname": "logging.LogRecord.__init__", "modulename": "logging", "qualname": "LogRecord.__init__", "kind": "function", "doc": "<p>Initialize a logging record with interesting information.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">level</span>,</span><span class=\"param\">\t<span class=\"n\">pathname</span>,</span><span class=\"param\">\t<span class=\"n\">lineno</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span>,</span><span class=\"param\">\t<span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"n\">exc_info</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sinfo</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "logging.LogRecord.name", "modulename": "logging", "qualname": "LogRecord.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.msg", "modulename": "logging", "qualname": "LogRecord.msg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.args", "modulename": "logging", "qualname": "LogRecord.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.levelname", "modulename": "logging", "qualname": "LogRecord.levelname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.levelno", "modulename": "logging", "qualname": "LogRecord.levelno", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.pathname", "modulename": "logging", "qualname": "LogRecord.pathname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.exc_info", "modulename": "logging", "qualname": "LogRecord.exc_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.exc_text", "modulename": "logging", "qualname": "LogRecord.exc_text", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.stack_info", "modulename": "logging", "qualname": "LogRecord.stack_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.lineno", "modulename": "logging", "qualname": "LogRecord.lineno", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.funcName", "modulename": "logging", "qualname": "LogRecord.funcName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.created", "modulename": "logging", "qualname": "LogRecord.created", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.msecs", "modulename": "logging", "qualname": "LogRecord.msecs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.relativeCreated", "modulename": "logging", "qualname": "LogRecord.relativeCreated", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.taskName", "modulename": "logging", "qualname": "LogRecord.taskName", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LogRecord.getMessage", "modulename": "logging", "qualname": "LogRecord.getMessage", "kind": "function", "doc": "<p>Return the message for this LogRecord.</p>\n\n<p>Return the message for this LogRecord after merging any user-supplied\narguments with the message.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger", "modulename": "logging", "qualname": "Logger", "kind": "class", "doc": "<p>Instances of the Logger class represent a single logging channel. A\n\"logging channel\" indicates an area of an application. Exactly how an\n\"area\" is defined is up to the application developer. Since an\napplication can have any number of areas, logging channels are identified\nby a unique string. Application areas can be nested (e.g. an area\nof \"input processing\" might include sub-areas \"read CSV files\", \"read\nXLS files\" and \"read Gnumeric files\"). To cater for this natural nesting,\nchannel names are organized into a namespace hierarchy where levels are\nseparated by periods, much like the Java or Python package namespace. So\nin the instance given above, channel names might be \"input\" for the upper\nlevel, and \"input.csv\", \"input.xls\" and \"input.gnu\" for the sub-levels.\nThere is no arbitrary limit to the depth of nesting.</p>\n", "bases": "Filterer"}, {"fullname": "logging.Logger.__init__", "modulename": "logging", "qualname": "Logger.__init__", "kind": "function", "doc": "<p>Initialize the logger with a name and an optional level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span></span>)</span>"}, {"fullname": "logging.Logger.name", "modulename": "logging", "qualname": "Logger.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Logger.level", "modulename": "logging", "qualname": "Logger.level", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Logger.parent", "modulename": "logging", "qualname": "Logger.parent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Logger.propagate", "modulename": "logging", "qualname": "Logger.propagate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Logger.handlers", "modulename": "logging", "qualname": "Logger.handlers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Logger.disabled", "modulename": "logging", "qualname": "Logger.disabled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.Logger.setLevel", "modulename": "logging", "qualname": "Logger.setLevel", "kind": "function", "doc": "<p>Set the logging level of this logger.  level must be an int or a str.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.debug", "modulename": "logging", "qualname": "Logger.debug", "kind": "function", "doc": "<p>Log 'msg % args' with severity 'DEBUG'.</p>\n\n<p>To pass exception information, use the keyword argument exc_info with\na true value, e.g.</p>\n\n<p>logger.debug(\"Houston, we have a %s\", \"thorny problem\", exc_info=True)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.info", "modulename": "logging", "qualname": "Logger.info", "kind": "function", "doc": "<p>Log 'msg % args' with severity 'INFO'.</p>\n\n<p>To pass exception information, use the keyword argument exc_info with\na true value, e.g.</p>\n\n<p>logger.info(\"Houston, we have a %s\", \"notable problem\", exc_info=True)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.warning", "modulename": "logging", "qualname": "Logger.warning", "kind": "function", "doc": "<p>Log 'msg % args' with severity 'WARNING'.</p>\n\n<p>To pass exception information, use the keyword argument exc_info with\na true value, e.g.</p>\n\n<p>logger.warning(\"Houston, we have a %s\", \"bit of a problem\", exc_info=True)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.warn", "modulename": "logging", "qualname": "Logger.warn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.error", "modulename": "logging", "qualname": "Logger.error", "kind": "function", "doc": "<p>Log 'msg % args' with severity 'ERROR'.</p>\n\n<p>To pass exception information, use the keyword argument exc_info with\na true value, e.g.</p>\n\n<p>logger.error(\"Houston, we have a %s\", \"major problem\", exc_info=True)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.exception", "modulename": "logging", "qualname": "Logger.exception", "kind": "function", "doc": "<p>Convenience method for logging an ERROR with exception information.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.critical", "modulename": "logging", "qualname": "Logger.critical", "kind": "function", "doc": "<p>Log 'msg % args' with severity 'CRITICAL'.</p>\n\n<p>To pass exception information, use the keyword argument exc_info with\na true value, e.g.</p>\n\n<p>logger.critical(\"Houston, we have a %s\", \"major disaster\", exc_info=True)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.fatal", "modulename": "logging", "qualname": "Logger.fatal", "kind": "function", "doc": "<p>Don't use this method, use critical() instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.log", "modulename": "logging", "qualname": "Logger.log", "kind": "function", "doc": "<p>Log 'msg % args' with the integer severity 'level'.</p>\n\n<p>To pass exception information, use the keyword argument exc_info with\na true value, e.g.</p>\n\n<p>logger.log(level, \"We have a %s\", \"mysterious problem\", exc_info=True)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.findCaller", "modulename": "logging", "qualname": "Logger.findCaller", "kind": "function", "doc": "<p>Find the stack frame of the caller so that we can note the source\nfile name, line number and function name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stack_info</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.makeRecord", "modulename": "logging", "qualname": "Logger.makeRecord", "kind": "function", "doc": "<p>A factory method which can be overridden in subclasses to create\nspecialized LogRecords.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">level</span>,</span><span class=\"param\">\t<span class=\"n\">fn</span>,</span><span class=\"param\">\t<span class=\"n\">lno</span>,</span><span class=\"param\">\t<span class=\"n\">msg</span>,</span><span class=\"param\">\t<span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"n\">exc_info</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sinfo</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.handle", "modulename": "logging", "qualname": "Logger.handle", "kind": "function", "doc": "<p>Call the handlers for the specified record.</p>\n\n<p>This method is used for unpickled records received from a socket, as\nwell as those created locally. Logger-level filtering is applied.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.addHandler", "modulename": "logging", "qualname": "Logger.addHandler", "kind": "function", "doc": "<p>Add the specified handler to this logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hdlr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.removeHandler", "modulename": "logging", "qualname": "Logger.removeHandler", "kind": "function", "doc": "<p>Remove the specified handler from this logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hdlr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.hasHandlers", "modulename": "logging", "qualname": "Logger.hasHandlers", "kind": "function", "doc": "<p>See if this logger has any handlers configured.</p>\n\n<p>Loop through all handlers for this logger and its parents in the\nlogger hierarchy. Return True if a handler was found, else False.\nStop searching up the hierarchy whenever a logger with the \"propagate\"\nattribute set to zero is found - that will be the last logger which\nis checked for the existence of handlers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.callHandlers", "modulename": "logging", "qualname": "Logger.callHandlers", "kind": "function", "doc": "<p>Pass a record to all relevant handlers.</p>\n\n<p>Loop through all handlers for this logger and its parents in the\nlogger hierarchy. If no handler was found, output a one-off error\nmessage to sys.stderr. Stop searching up the hierarchy whenever a\nlogger with the \"propagate\" attribute set to zero is found - that\nwill be the last logger whose handlers are called.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.getEffectiveLevel", "modulename": "logging", "qualname": "Logger.getEffectiveLevel", "kind": "function", "doc": "<p>Get the effective level for this logger.</p>\n\n<p>Loop through this logger and its parents in the logger hierarchy,\nlooking for a non-zero logging level. Return the first one found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.isEnabledFor", "modulename": "logging", "qualname": "Logger.isEnabledFor", "kind": "function", "doc": "<p>Is this logger enabled for level 'level'?</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.getChild", "modulename": "logging", "qualname": "Logger.getChild", "kind": "function", "doc": "<p>Get a logger which is a descendant to this one.</p>\n\n<p>This is a convenience method, such that</p>\n\n<p>logging.getLogger('abc').getChild('def.ghi')</p>\n\n<p>is the same as</p>\n\n<p>logging.getLogger('abc.def.ghi')</p>\n\n<p>It's useful, for example, when the parent logger is named using\n__name__ rather than a literal string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">suffix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.getChildren", "modulename": "logging", "qualname": "Logger.getChildren", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.root", "modulename": "logging", "qualname": "Logger.root", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;RootLogger root (WARNING)&gt;"}, {"fullname": "logging.Logger.manager", "modulename": "logging", "qualname": "Logger.manager", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;logging.Manager object&gt;"}, {"fullname": "logging.Logger.warning_advice", "modulename": "logging", "qualname": "Logger.warning_advice", "kind": "function", "doc": "<p>This method is identical to <code>logger.warning()</code>, but if env var TRANSFORMERS_NO_ADVISORY_WARNINGS=1 is set, this\nwarning will not be printed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.warning_once", "modulename": "logging", "qualname": "Logger.warning_once", "kind": "function", "doc": "<p>This method is identical to <code>logger.warning()</code>, but will emit the warning with the same message only once</p>\n\n<p>Note: The cache is for the function arguments, so 2 different callers using the same arguments will hit the cache.\nThe assumption here is that all warning messages are unique across the code. If they aren't then need to switch to\nanother type of cache that includes the caller frame information in the hashing function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.Logger.info_once", "modulename": "logging", "qualname": "Logger.info_once", "kind": "function", "doc": "<p>This method is identical to <code>logger.info()</code>, but will emit the info with the same message only once</p>\n\n<p>Note: The cache is for the function arguments, so 2 different callers using the same arguments will hit the cache.\nThe assumption here is that all warning messages are unique across the code. If they aren't then need to switch to\nanother type of cache that includes the caller frame information in the hashing function.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter", "modulename": "logging", "qualname": "LoggerAdapter", "kind": "class", "doc": "<p>An adapter for loggers which makes it easier to specify contextual\ninformation in logging output.</p>\n"}, {"fullname": "logging.LoggerAdapter.__init__", "modulename": "logging", "qualname": "LoggerAdapter.__init__", "kind": "function", "doc": "<p>Initialize the adapter with a logger and a dict-like object which\nprovides contextual information. This constructor signature allows\neasy stacking of LoggerAdapters, if so desired.</p>\n\n<p>You can effectively pass keyword arguments as shown in the\nfollowing example:</p>\n\n<p>adapter = LoggerAdapter(someLogger, dict(p1=v1, p2=\"v2\"))</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">logger</span>, </span><span class=\"param\"><span class=\"n\">extra</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "logging.LoggerAdapter.logger", "modulename": "logging", "qualname": "LoggerAdapter.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LoggerAdapter.extra", "modulename": "logging", "qualname": "LoggerAdapter.extra", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LoggerAdapter.process", "modulename": "logging", "qualname": "LoggerAdapter.process", "kind": "function", "doc": "<p>Process the logging message and keyword arguments passed in to\na logging call to insert contextual information. You can either\nmanipulate the message itself, the keyword args or both. Return\nthe message and kwargs modified (or not) to suit your needs.</p>\n\n<p>Normally, you'll only need to override this one method in a\nLoggerAdapter subclass for your specific needs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.debug", "modulename": "logging", "qualname": "LoggerAdapter.debug", "kind": "function", "doc": "<p>Delegate a debug call to the underlying logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.info", "modulename": "logging", "qualname": "LoggerAdapter.info", "kind": "function", "doc": "<p>Delegate an info call to the underlying logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.warning", "modulename": "logging", "qualname": "LoggerAdapter.warning", "kind": "function", "doc": "<p>Delegate a warning call to the underlying logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.warn", "modulename": "logging", "qualname": "LoggerAdapter.warn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.error", "modulename": "logging", "qualname": "LoggerAdapter.error", "kind": "function", "doc": "<p>Delegate an error call to the underlying logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.exception", "modulename": "logging", "qualname": "LoggerAdapter.exception", "kind": "function", "doc": "<p>Delegate an exception call to the underlying logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.critical", "modulename": "logging", "qualname": "LoggerAdapter.critical", "kind": "function", "doc": "<p>Delegate a critical call to the underlying logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.log", "modulename": "logging", "qualname": "LoggerAdapter.log", "kind": "function", "doc": "<p>Delegate a log call to the underlying logger, after adding\ncontextual information from this adapter instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.isEnabledFor", "modulename": "logging", "qualname": "LoggerAdapter.isEnabledFor", "kind": "function", "doc": "<p>Is this logger enabled for level 'level'?</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.setLevel", "modulename": "logging", "qualname": "LoggerAdapter.setLevel", "kind": "function", "doc": "<p>Set the specified level on the underlying logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">level</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.getEffectiveLevel", "modulename": "logging", "qualname": "LoggerAdapter.getEffectiveLevel", "kind": "function", "doc": "<p>Get the effective level for the underlying logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.hasHandlers", "modulename": "logging", "qualname": "LoggerAdapter.hasHandlers", "kind": "function", "doc": "<p>See if the underlying logger has any handlers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.LoggerAdapter.manager", "modulename": "logging", "qualname": "LoggerAdapter.manager", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.LoggerAdapter.name", "modulename": "logging", "qualname": "LoggerAdapter.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.NOTSET", "modulename": "logging", "qualname": "NOTSET", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "logging.NullHandler", "modulename": "logging", "qualname": "NullHandler", "kind": "class", "doc": "<p>This handler does nothing. It's intended to be used to avoid the\n\"No handlers could be found for logger XXX\" one-off warning. This is\nimportant for library code, which may contain code to log events. If a user\nof the library does not configure logging, the one-off warning might be\nproduced; to avoid this, the library developer simply needs to instantiate\na NullHandler and add it to the top-level logger of the library module or\npackage.</p>\n", "bases": "Handler"}, {"fullname": "logging.NullHandler.handle", "modulename": "logging", "qualname": "NullHandler.handle", "kind": "function", "doc": "<p>Stub.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.NullHandler.emit", "modulename": "logging", "qualname": "NullHandler.emit", "kind": "function", "doc": "<p>Stub.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.NullHandler.createLock", "modulename": "logging", "qualname": "NullHandler.createLock", "kind": "function", "doc": "<p>Acquire a thread lock for serializing access to the underlying I/O.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.StreamHandler", "modulename": "logging", "qualname": "StreamHandler", "kind": "class", "doc": "<p>A handler class which writes logging records, appropriately formatted,\nto a stream. Note that this class does not close the stream, as\nsys.stdout or sys.stderr may be used.</p>\n", "bases": "Handler"}, {"fullname": "logging.StreamHandler.__init__", "modulename": "logging", "qualname": "StreamHandler.__init__", "kind": "function", "doc": "<p>Initialize the handler.</p>\n\n<p>If stream is not specified, sys.stderr is used.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "logging.StreamHandler.terminator", "modulename": "logging", "qualname": "StreamHandler.terminator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;\\n&#x27;"}, {"fullname": "logging.StreamHandler.stream", "modulename": "logging", "qualname": "StreamHandler.stream", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "logging.StreamHandler.flush", "modulename": "logging", "qualname": "StreamHandler.flush", "kind": "function", "doc": "<p>Flushes the stream.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.StreamHandler.emit", "modulename": "logging", "qualname": "StreamHandler.emit", "kind": "function", "doc": "<p>Emit a record.</p>\n\n<p>If a formatter is specified, it is used to format the record.\nThe record is then written to the stream with a trailing newline.  If\nexception information is present, it is formatted using\ntraceback.print_exception and appended to the stream.  If the stream\nhas an 'encoding' attribute, it is used to determine how to do the\noutput to the stream.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">record</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.StreamHandler.setStream", "modulename": "logging", "qualname": "StreamHandler.setStream", "kind": "function", "doc": "<p>Sets the StreamHandler's stream to the specified value,\nif it is different.</p>\n\n<p>Returns the old stream, if the stream was changed, or None\nif it wasn't.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stream</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.WARN", "modulename": "logging", "qualname": "WARN", "kind": "variable", "doc": "<p></p>\n", "default_value": "30"}, {"fullname": "logging.WARNING", "modulename": "logging", "qualname": "WARNING", "kind": "variable", "doc": "<p></p>\n", "default_value": "30"}, {"fullname": "logging.addLevelName", "modulename": "logging", "qualname": "addLevelName", "kind": "function", "doc": "<p>Associate 'levelName' with 'level'.</p>\n\n<p>This is used when converting levels to text during message formatting.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span>, </span><span class=\"param\"><span class=\"n\">levelName</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.basicConfig", "modulename": "logging", "qualname": "basicConfig", "kind": "function", "doc": "<p>Do basic configuration for the logging system.</p>\n\n<p>This function does nothing if the root logger already has handlers\nconfigured, unless the keyword argument <em>force</em> is set to <code>True</code>.\nIt is a convenience method intended for use by simple scripts\nto do one-shot configuration of the logging package.</p>\n\n<p>The default behaviour is to create a StreamHandler which writes to\nsys.stderr, set a formatter using the BASIC_FORMAT format string, and\nadd the handler to the root logger.</p>\n\n<p>A number of optional keyword arguments may be specified, which can alter\nthe default behaviour.</p>\n\n<p>filename  Specifies that a FileHandler be created, using the specified\n          filename, rather than a StreamHandler.\nfilemode  Specifies the mode to open the file, if filename is specified\n          (if filemode is unspecified, it defaults to 'a').\nformat    Use the specified format string for the handler.\ndatefmt   Use the specified date/time format.\nstyle     If a format string is specified, use this to specify the\n          type of format string (possible values '%', '{', '$', for\n          %-formatting, <code>str.format()</code> and <code>string.Template</code>\n          - defaults to '%').\nlevel     Set the root logger level to the specified level.\nstream    Use the specified stream to initialize the StreamHandler. Note\n          that this argument is incompatible with 'filename' - if both\n          are present, 'stream' is ignored.\nhandlers  If specified, this should be an iterable of already created\n          handlers, which will be added to the root logger. Any handler\n          in the list which does not have a formatter assigned will be\n          assigned the formatter created in this function.\nforce     If this keyword  is specified as true, any existing handlers\n          attached to the root logger are removed and closed, before\n          carrying out the configuration as specified by the other\n          arguments.\nencoding  If specified together with a filename, this encoding is passed to\n          the created FileHandler, causing it to be used when the file is\n          opened.\nerrors    If specified together with a filename, this value is passed to the\n          created FileHandler, causing it to be used when the file is\n          opened in text mode. If not specified, the default value is\n          <code>backslashreplace</code>.</p>\n\n<p>Note that you could specify a stream created using open(filename, mode)\nrather than passing the filename and mode in. However, it should be\nremembered that StreamHandler does not close its stream (since it may be\nusing sys.stdout or sys.stderr), whereas FileHandler closes its stream\nwhen the handler is closed.</p>\n\n<p><em>Changed in version 3.2:</em>\nAdded the <code>style</code> parameter.</p>\n\n<p><em>Changed in version 3.3:</em>\nAdded the <code>handlers</code> parameter. A <code>ValueError</code> is now thrown for\nincompatible arguments (e.g. <code>handlers</code> specified together with\n<code>filename</code>/<code>filemode</code>, or <code>filename</code>/<code>filemode</code> specified\ntogether with <code>stream</code>, or <code>handlers</code> specified together with\n<code>stream</code>.</p>\n\n<p><em>Changed in version 3.8:</em>\nAdded the <code>force</code> parameter.</p>\n\n<p><em>Changed in version 3.9:</em>\nAdded the <code>encoding</code> and <code>errors</code> parameters.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.captureWarnings", "modulename": "logging", "qualname": "captureWarnings", "kind": "function", "doc": "<p>If capture is true, redirect all warnings to the logging package.\nIf capture is False, ensure that warnings are not redirected to logging\nbut to their original destinations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">capture</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.critical", "modulename": "logging", "qualname": "critical", "kind": "function", "doc": "<p>Log a message with severity 'CRITICAL' on the root logger. If the logger\nhas no handlers, call basicConfig() to add a console handler with a\npre-defined format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.debug", "modulename": "logging", "qualname": "debug", "kind": "function", "doc": "<p>Log a message with severity 'DEBUG' on the root logger. If the logger has\nno handlers, call basicConfig() to add a console handler with a pre-defined\nformat.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.disable", "modulename": "logging", "qualname": "disable", "kind": "function", "doc": "<p>Disable all logging calls of severity 'level' and below.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">50</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.error", "modulename": "logging", "qualname": "error", "kind": "function", "doc": "<p>Log a message with severity 'ERROR' on the root logger. If the logger has\nno handlers, call basicConfig() to add a console handler with a pre-defined\nformat.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.exception", "modulename": "logging", "qualname": "exception", "kind": "function", "doc": "<p>Log a message with severity 'ERROR' on the root logger, with exception\ninformation. If the logger has no handlers, basicConfig() is called to add\na console handler with a pre-defined format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.fatal", "modulename": "logging", "qualname": "fatal", "kind": "function", "doc": "<p>Don't use this function, use critical() instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.getLevelName", "modulename": "logging", "qualname": "getLevelName", "kind": "function", "doc": "<p>Return the textual or numeric representation of logging level 'level'.</p>\n\n<p>If the level is one of the predefined levels (CRITICAL, ERROR, WARNING,\nINFO, DEBUG) then you get the corresponding string. If you have\nassociated levels with names using addLevelName then the name you have\nassociated with 'level' is returned.</p>\n\n<p>If a numeric value corresponding to one of the defined levels is passed\nin, the corresponding string representation is returned.</p>\n\n<p>If a string representation of the level is passed in, the corresponding\nnumeric value is returned.</p>\n\n<p>If no matching numeric or string value is passed in, the string\n'Level %s' % level is returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.getLogger", "modulename": "logging", "qualname": "getLogger", "kind": "function", "doc": "<p>Return a logger with the specified name, creating it if necessary.</p>\n\n<p>If no name is specified, return the root logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.getLoggerClass", "modulename": "logging", "qualname": "getLoggerClass", "kind": "function", "doc": "<p>Return the class to be used when instantiating a logger.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.info", "modulename": "logging", "qualname": "info", "kind": "function", "doc": "<p>Log a message with severity 'INFO' on the root logger. If the logger has\nno handlers, call basicConfig() to add a console handler with a pre-defined\nformat.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.log", "modulename": "logging", "qualname": "log", "kind": "function", "doc": "<p>Log 'msg % args' with the integer severity 'level' on the root logger. If\nthe logger has no handlers, call basicConfig() to add a console handler\nwith a pre-defined format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span>, </span><span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.makeLogRecord", "modulename": "logging", "qualname": "makeLogRecord", "kind": "function", "doc": "<p>Make a LogRecord whose attributes are defined by the specified dictionary,\nThis function is useful for converting a logging event received over\na socket connection (which is sent as a dictionary) into a LogRecord\ninstance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.setLoggerClass", "modulename": "logging", "qualname": "setLoggerClass", "kind": "function", "doc": "<p>Set the class to be used when instantiating a logger. The class should\ndefine __init__() such that only a name argument is required, and the\n__init__() should call Logger.__init__()</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">klass</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.shutdown", "modulename": "logging", "qualname": "shutdown", "kind": "function", "doc": "<p>Perform any cleanup actions in the logging system (e.g. flushing\nbuffers).</p>\n\n<p>Should be called at application exit.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">handlerList</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5bab5bef70</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;_StderrHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5baa6590d0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;_StderrHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5b65f48fe0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;NullHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5b6150dcb0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5b61550e00</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;NullHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5b689e76a0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;NullHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5b03d7a250</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5ae39e27a0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;NullHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5ae31fe4d0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5ae31fec50</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5ae3074e00</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5ae3074ae0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5ae23d9800</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;NullHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a817472e0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480220</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480270</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480360</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480450</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480540</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480630</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480720</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480810</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480900</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f4809f0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480ae0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480bd0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480cc0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480db0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f480ef0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f481030</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f481170</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f4812b0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f4813f0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a5f4814e0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;LazyTraceHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a25756250</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a25790b30</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a24f6b510</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a24a00720</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">weakref</span> <span class=\"n\">at</span> <span class=\"mh\">0x7c5a1dd00bd0</span><span class=\"p\">;</span> <span class=\"n\">to</span> <span class=\"s1\">&#39;StreamHandler&#39;</span><span class=\"o\">&gt;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.warn", "modulename": "logging", "qualname": "warn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.warning", "modulename": "logging", "qualname": "warning", "kind": "function", "doc": "<p>Log a message with severity 'WARNING' on the root logger. If the logger has\nno handlers, call basicConfig() to add a console handler with a pre-defined\nformat.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.getLogRecordFactory", "modulename": "logging", "qualname": "getLogRecordFactory", "kind": "function", "doc": "<p>Return the factory to be used when instantiating a log record.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.setLogRecordFactory", "modulename": "logging", "qualname": "setLogRecordFactory", "kind": "function", "doc": "<p>Set the factory to be used when instantiating a log record.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>factory</strong>:  A callable which will be called to instantiate\na log record.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">factory</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.lastResort", "modulename": "logging", "qualname": "lastResort", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;_StderrHandler &lt;stderr&gt; (WARNING)&gt;"}, {"fullname": "logging.raiseExceptions", "modulename": "logging", "qualname": "raiseExceptions", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "logging.getLevelNamesMapping", "modulename": "logging", "qualname": "getLevelNamesMapping", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.getHandlerByName", "modulename": "logging", "qualname": "getHandlerByName", "kind": "function", "doc": "<p>Get a handler with the specified <em>name</em>, or None if there isn't one with\nthat name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "logging.getHandlerNames", "modulename": "logging", "qualname": "getHandlerNames", "kind": "function", "doc": "<p>Return all known handler names as an immutable set.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "selector", "modulename": "selector", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "selector.select_random", "modulename": "selector", "qualname": "select_random", "kind": "function", "doc": "<p>Select a random subset of samples from the dataset.</p>\n\n<p>Parameters:\ndataset (Dataset): The dataset from which to select samples.\nn_samples (int): The number of samples to select.\nseed (int, optional): The seed for the random number generator. Default is 0.</p>\n\n<p>Returns:\nDataset: A dataset containing the randomly selected samples.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">n_samples</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "selector.select_by_class", "modulename": "selector", "qualname": "select_by_class", "kind": "function", "doc": "<p>Filters a dataset based on inclusion and exclusion of specified classes.</p>\n\n<p>Args:\n    dataset: The dataset to be filtered.\n    classes_in (str or list of str): Classes to include in the filtered dataset.\n    classes_out (str or list of str): Classes to exclude from the filtered dataset.</p>\n\n<p>Returns:\n    A filtered view of the dataset based on the specified inclusion and exclusion conditions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">classes_in</span>, </span><span class=\"param\"><span class=\"n\">classes_out</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();